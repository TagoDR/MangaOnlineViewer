:host {
  display: inline-block;
  --mov-font-size-scale: 1;
  --mov-font-size-m: calc(1rem * var(--mov-font-size-scale));
  --mov-font-size-s: round(calc(var(--mov-font-size-m) / 1.125), 1px);
  --mov-font-size-l: round(calc(var(--mov-font-size-m) * 1.125 * 1.125), 1px);
  --mov-border-width-s: 0.0625rem;
  --mov-border-radius-m: 0.375rem;
  --mov-border-radius-pill: 9999px;
  --mov-transition-fast: 75ms;
  --mov-font-weight-action: 500;
  --mov-focus-ring: solid 0.1875rem var(--theme-primary-color);
  --mov-focus-ring-offset: 0.0625rem;
  --mov-line-height-condensed: 1.2;
  --mov-form-control-padding-block: 0.75em;
  --mov-form-control-padding-inline: 1em;
  --mov-form-control-height: round(
    calc(2 * var(--mov-form-control-padding-block) + 1em * var(--mov-line-height-condensed)),
    1px
  );
}

:host([size="small"]) {
  font-size: var(--mov-font-size-s);
}
:host([size="medium"]) {
  font-size: var(--mov-font-size-m);
}
:host([size="large"]) {
  font-size: var(--mov-font-size-l);
}

.button {
  box-sizing: border-box;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  text-decoration: none;
  user-select: none;
  white-space: nowrap;
  vertical-align: middle;
  transition-property: background, border, box-shadow, color;
  transition-duration: var(--mov-transition-fast);
  cursor: pointer;
  padding: 0 var(--mov-form-control-padding-inline);
  font-family: inherit;
  font-size: inherit;
  font-weight: var(--mov-font-weight-action);
  line-height: calc(var(--mov-form-control-height) - var(--mov-border-width-s) * 2);
  height: var(--mov-form-control-height);
  border-radius: var(--mov-border-radius-m);
  border-style: solid;
  border-width: var(--mov-border-width-s);
  background-color: var(--mov-color-fill-loud);
  color: var(--mov-color-on-loud);
  border-color: transparent;
}

/* Appearance modifiers */
:host([appearance~="plain"]) {
  .button {
    color: var(--mov-color-on-quiet);
    background-color: transparent;
    border-color: transparent;
  }
  @media (hover: hover) {
    .button:not(.disabled):not(.loading):hover {
      color: var(--mov-color-on-quiet);
      background-color: var(--mov-color-fill-quiet);
    }
  }
  .button:not(.disabled):not(.loading):active {
    color: var(--mov-color-on-quiet);
    background-color: color-mix(in oklab, var(--mov-color-fill-quiet), var(--mov-color-mix-active));
  }
}

:host([appearance~="outlined"]) {
  .button {
    color: var(--mov-color-on-quiet);
    background-color: transparent;
    border-color: var(--mov-color-border-loud);
  }
  @media (hover: hover) {
    .button:not(.disabled):not(.loading):hover {
      color: var(--mov-color-on-quiet);
      background-color: var(--mov-color-fill-quiet);
    }
  }
  .button:not(.disabled):not(.loading):active {
    color: var(--mov-color-on-quiet);
    background-color: color-mix(in oklab, var(--mov-color-fill-quiet), var(--mov-color-mix-active));
  }
}

:host([appearance~="filled"]) {
  .button {
    color: var(--mov-color-on-normal);
    background-color: var(--mov-color-fill-normal);
    border-color: transparent;
  }
  @media (hover: hover) {
    .button:not(.disabled):not(.loading):hover {
      color: var(--mov-color-on-normal);
      background-color: color-mix(
        in oklab,
        var(--mov-color-fill-normal),
        var(--mov-color-mix-hover)
      );
    }
  }
  .button:not(.disabled):not(.loading):active {
    color: var(--mov-color-on-normal);
    background-color: color-mix(
      in oklab,
      var(--mov-color-fill-normal),
      var(--mov-color-mix-active)
    );
  }
}

:host([appearance~="filled"][appearance~="outlined"]) .button {
  border-color: var(--mov-color-border-normal);
}

:host([appearance~="accent"]) {
  .button {
    color: var(--mov-color-on-loud);
    background-color: var(--mov-color-fill-loud);
    border-color: transparent;
  }
  @media (hover: hover) {
    .button:not(.disabled):not(.loading):hover {
      background-color: color-mix(in oklab, var(--mov-color-fill-loud), var(--mov-color-mix-hover));
    }
  }
  .button:not(.disabled):not(.loading):active {
    background-color: color-mix(in oklab, var(--mov-color-fill-loud), var(--mov-color-mix-active));
  }
}
/* Focus states */
.button:focus {
  outline: none;
}
.button:focus-visible {
  outline: var(--mov-focus-ring);
  outline-offset: var(--mov-focus-ring-offset);
}

/* Disabled state */
.button.disabled {
  opacity: 0.5;
  cursor: not-allowed;
}
.button.disabled * {
  pointer-events: none;
}

/* Icon buttons */
.button.is-icon-button {
  outline-offset: 2px;
  width: var(--mov-form-control-height);
  aspect-ratio: 1;
}

/* Pill modifier */
:host([pill]) .button {
  border-radius: var(--mov-border-radius-pill);
}

.start,
.end {
  flex: 0 0 auto;
  display: flex;
  align-items: center;
  pointer-events: none;
}

.label {
  display: inline-block;
}
.is-icon-button .label {
  display: flex;
}

mov-icon[part~="caret"] {
  display: flex;
  align-self: center;
  align-items: center;
}
mov-icon[part~="caret"]::part(svg) {
  width: 0.875em;
  height: 0.875em;
}

.loading {
  position: relative;
  cursor: wait;
}
.loading .start,
.loading .label,
.loading .end,
.loading .caret {
  visibility: hidden;
}

.spinner {
  --indicator-color: currentColor;
  --track-color: color-mix(in oklab, currentColor, transparent 90%);
  position: absolute;
  font-size: 1em;
  height: 1em;
  width: 1em;
  top: calc(50% - 0.5em);
  left: calc(50% - 0.5em);
  border-radius: 50%;
  border: 2px solid var(--track-color);
  border-top-color: var(--indicator-color);
  animation: spin 1s linear infinite;
}

@keyframes spin {
  to {
    transform: rotate(360deg);
  }
}

slot[name="start"]::slotted(*) {
  margin-inline-end: 0.75em;
}
slot[name="end"]::slotted(*),
.button:not(.visually-hidden-label) [part~="caret"] {
  margin-inline-start: 0.75em;
}
